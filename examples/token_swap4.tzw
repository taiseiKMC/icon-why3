scope Preambles
  use string.String
  use list.Length
  use list.Map
  use list.Quant

  function sum_of : (map address nat) -> nat

  axiom SumE : sum_of (const 0) = 0

  axiom SumI : forall m k v.
    v >= 0 ->
    m[k] >= 0 /\ (* これ上手いこと自動でできない？ *)
    sum_of m[k <- v] = sum_of m + v - m[k]
  
  (* axiom SumI' : forall b a k v.
    let m = b[a] in
    v >= 0 ->
    m[k] >= 0 /\
    sum_of m[k <- v] = sum_of m + v - m[k] *)

  
  meta "algebraic:kept" type (map nat (map address nat), map nat (map address nat))

  function update_balance
    (from_ : address)
    (to_ : address)
    (token_id : nat)
    (amount : nat)
    (balances : map nat (map address nat))
    (balances' : map nat (map address nat))
    : (map nat (map address nat), map nat (map address nat)) =
    let b = balances[token_id] in
    let to_balance = b[to_] + amount in
    let b = b[to_ <- to_balance] in
    let b' = balances'[token_id] in
    let from_balance = b'[from_] + amount in
    let b' = b'[from_ <- from_balance] in
    (balances[token_id <- b], balances'[token_id <- b'])
end

scope Postambles

  predicate balances_invariant (c : ctx) (c' : ctx) = true
    (* forall a. sum_of c.token_storage.Token.balances[a] = sum_of c'.token_storage.Token.balances[a]
    (* 正しいが自動では示せない *) *)
end

scope Unknown
  predicate pre (c : ctx) = Token0.addr <> Token1.addr (* 必要!!! *)

  predicate post (c : ctx) (c' : ctx) =
    balances_invariant c c'

  scope Entrypoint
    predicate default unit
  end

end

scope Swap

  type storage [@gen_wf] = { }

  predicate pre (st : step) (gp : gparam) (c : ctx) = Token0.addr <> Token1.addr

  predicate post (_st : step) (gp : gparam) (c : ctx) (c' : ctx) =
    balances_invariant c c' /\
    match gp with
    | Gp'Swap'swap a_addr a_token_id a_amount b_addr b_token_id b_amount ->
        c.token0_storage.Token0.operators[a_token_id][a_addr][Swap.addr] /\
        c.token1_storage.Token1.operators[b_token_id][b_addr][Swap.addr] /\
        ( let balances = c.token0_storage.Token0.balances in
          let balances' = c'.token0_storage.Token0.balances in
          let balances, balances' = update_balance a_addr b_addr a_token_id a_amount balances balances' in
          balances = balances'
        ) /\
        ( let balances = c.token1_storage.Token1.balances in
          let balances' = c'.token1_storage.Token1.balances in
          let balances, balances' = update_balance b_addr a_addr b_token_id b_amount balances balances' in
          balances = balances'
        )
    | _ -> false
    end

  let upper_ops = 2

  scope Spec
    predicate swap
      (st : step)
      (a_addr : address)
      (a_token_id : nat)
      (a_amount : nat)
      (b_addr : address)
      (b_token_id : nat)
      (b_amount : nat)
      (s : storage)
      (ops : list operation)
      (s' : storage) =
      (* a_token_id <> b_token_id /\ (* for simplicity *) *)
      a_addr <> self st /\
      b_addr <> self st /\
      let op0 = Xfer (Gp'Token0'transfer a_addr b_addr a_token_id a_amount) 0 Token0.addr in
      let op1 = Xfer (Gp'Token1'transfer b_addr a_addr b_token_id b_amount) 0 Token1.addr in
      ops = Cons op0 (Cons op1 Nil)

  end

end

scope Token0
  type storage [@gen_wf] = {
    balances : map nat (map address nat);
    operators : map nat (map address (map address bool));
  }

  predicate pre (st : step) (gp : gparam) (c : ctx) = Token0.addr <> Token1.addr

  predicate post (st : step) (gp : gparam) (c : ctx) (c' : ctx) =
    balances_invariant c c' /\
    c.token1_storage = c'.token1_storage /\
    match gp with
    | Gp'Token0'transfer from_ to_ token_id amount ->
        ( from_ = sender st \/ c.token0_storage.Token0.operators[token_id][from_][sender st]) /\
          let balances = c.token0_storage.Token0.balances in
          let balances' = c'.token0_storage.Token0.balances in
          let b, b' = update_balance from_ to_ token_id amount balances balances' in
          b = b' /\
          c.token0_storage.Token0.operators = c'.token0_storage.Token0.operators
    | Gp'Token0'update_operators _ ->
        c.token0_storage.Token0.balances = c'.token0_storage.Token0.balances
    | _ -> false
    end

  let upper_ops = 0

  scope Spec

    predicate transfer
      (st : step)
      (from_ : address)
      (to_ : address)
      (token_id : nat)
      (amount : nat) (* from_, [(to, token_id, amount)] *)
      (s : storage)
      (ops : list operation)
      (s' : storage) =
        let sender = sender st in
        (from_ = sender \/ s.operators[token_id][from_][sender]) /\
        s.balances[token_id][from_] >= amount /\
        let b, b' = update_balance from_ to_ token_id amount s.balances s'.balances in
        b = b' /\
        s.operators = s'.operators /\
        ops = Nil

    (* predicate balance_of
      (st : step)
      (req : list (address, nat)) (* (owner, token_id) *)
      (callback : contract (list ((address, nat), nat))) (* ((owner, token_id), balance) *)
      (s : storage)
      (ops : list operation)
      (s' : storage) =
      let value = s.balances[addr] in
      let l =
        map
          (fun r ->
            let (owner, token_id) = r in
            r, s.balances[token_id][owner]) req in
      ops = Cons (Xfer (callback l) 0 (sender st)) Nil /\
      s = s' *)
  
  predicate update_operators
    (st : step)
    (e : (or (address, (address, nat)) (address, (address, nat))))
    (* add_operator (owner, operator, token_id), remove_operator (owner, operator, token_id) *)
    (s : storage)
    (ops : list operation)
    (s' : storage) =
      let sender = sender st in
      match e with
      | Left (owner, (ope, token_id)) ->
          owner = sender /\
          s'.operators[token_id][owner][ope]
      | Right (owner, (ope, token_id)) ->
          owner = sender /\
          not s'.operators[token_id][owner][ope]
      end /\
      s.balances = s'.balances /\
      ops = Nil

  end
end


scope Token1
  type storage [@gen_wf] = {
    balances : map nat (map address nat);
    operators : map nat (map address (map address bool));
  }

  predicate pre (st : step) (gp : gparam) (c : ctx) = Token0.addr <> Token1.addr

  predicate post (st : step) (gp : gparam) (c : ctx) (c' : ctx) =
    balances_invariant c c' /\
    c.token0_storage = c'.token0_storage /\
    match gp with
    | Gp'Token1'transfer from_ to_ token_id amount ->
        ( from_ = sender st \/ c.token1_storage.Token1.operators[token_id][from_][sender st]) /\
          let balances = c.token1_storage.Token1.balances in
          let balances' = c'.token1_storage.Token1.balances in
          let b, b' = update_balance from_ to_ token_id amount balances balances' in
          b = b' /\
          c.token1_storage.Token1.operators = c'.token1_storage.Token1.operators
    | Gp'Token1'update_operators _ ->
        c.token1_storage.Token1.balances = c'.token1_storage.Token1.balances
    | _ -> false
    end

  let upper_ops = 0

  scope Spec

    predicate transfer
      (st : step)
      (from_ : address)
      (to_ : address)
      (token_id : nat)
      (amount : nat) (* from_, [(to, token_id, amount)] *)
      (s : storage)
      (ops : list operation)
      (s' : storage) =
        let sender = sender st in
        (from_ = sender \/ s.operators[token_id][from_][sender]) /\
        s.balances[token_id][from_] >= amount /\
        let b, b' = update_balance from_ to_ token_id amount s.balances s'.balances in
        b = b' /\
        s.operators = s'.operators /\
        ops = Nil

    (* predicate balance_of
      (st : step)
      (req : list (address, nat)) (* (owner, token_id) *)
      (callback : contract (list ((address, nat), nat))) (* ((owner, token_id), balance) *)
      (s : storage)
      (ops : list operation)
      (s' : storage) =
      let value = s.balances[addr] in
      let l =
        map
          (fun r ->
            let (owner, token_id) = r in
            r, s.balances[token_id][owner]) req in
      ops = Cons (Xfer (callback l) 0 (sender st)) Nil /\
      s = s' *)
  
  predicate update_operators
    (st : step)
    (e : (or (address, (address, nat)) (address, (address, nat))))
    (* add_operator (owner, operator, token_id), remove_operator (owner, operator, token_id) *)
    (s : storage)
    (ops : list operation)
    (s' : storage) =
      let sender = sender st in
      match e with
      | Left (owner, (ope, token_id)) ->
          owner = sender /\
          s'.operators[token_id][owner][ope]
      | Right (owner, (ope, token_id)) ->
          owner = sender /\
          not s'.operators[token_id][owner][ope]
      end /\
      s.balances = s'.balances /\
      ops = Nil

  end
end

scope Implicit0
  type storage [@gen_wf] = {}

  predicate pre (st : step) (gp : gparam) (c : ctx) = Token0.addr <> Token1.addr

  predicate post (st : step) (gp : gparam) (c : ctx) (c' : ctx) =
    balances_invariant c c' /\
    match gp with
    | Gp'Implicit0'default a_token_id a_amount b_addr b_token_id b_amount ->
        let a_addr = self st in
        c.token1_storage.Token1.operators[b_token_id][b_addr][Swap.addr] /\
        ( let balances = c.token0_storage.Token0.balances in
          let balances' = c'.token0_storage.Token0.balances in
          let balances, balances' = update_balance a_addr b_addr a_token_id a_amount balances balances' in
          balances = balances'
        ) /\
        ( let balances = c.token1_storage.Token1.balances in
          let balances' = c'.token1_storage.Token1.balances in
          let balances, balances' = update_balance b_addr a_addr b_token_id b_amount balances balances' in
          balances = balances'
        )
    | _ -> false
    end

  let upper_ops = 3

  scope Spec
    predicate default (* b_addr が Token1 の b_token_id の operator として Swap.addr を許可していれば, swap する *)
      (st : step)
      (a_token_id : nat)
      (a_amount : nat)
      (b_addr : address)
      (b_token_id : nat)
      (b_amount : nat)
      (s : storage)
      (ops : list operation)
      (s' : storage) =
      let op0 = Xfer (Gp'Token0'update_operators (Left (self st, (Swap.addr, a_token_id)))) 0 Token0.addr in
      let op1 = Xfer (Gp'Swap'swap (self st) a_token_id a_amount b_addr b_token_id b_amount) 0 Swap.addr in
      let op2 = Xfer (Gp'Token0'update_operators (Right (self st, (Swap.addr, a_token_id)))) 0 Token0.addr in
      ops = Cons op0 (Cons op1 (Cons op2 Nil))
  end
end
