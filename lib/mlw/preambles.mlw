use export int.Int
use export int.Abs
use export int.EuclideanDivision
use export list.List
use export option.Option
use export map.Map
use export map.Const

exception Insufficient_mutez
exception Terminate

predicate is__tuple2_wf (is_a_wf : 'a -> bool) (is_b_wf : 'b -> bool) (ab : ('a, 'b)) =
  let (a,b) = ab in
  is_a_wf a /\ is_b_wf b

predicate is__tuple3_wf (is_a_wf : 'a -> bool) (is_b_wf : 'b -> bool) (is_c_wf : 'c -> bool) (abc : ('a, 'b, 'c)) =
  let (a,b,c) = abc in
  is_a_wf a /\ is_b_wf b /\ is_c_wf c

predicate is__tuple4_wf (is_a_wf : 'a -> bool) (is_b_wf : 'b -> bool) (is_c_wf : 'c -> bool) (is_d_wf : 'd -> bool) (abcd : ('a, 'b, 'c, 'd)) =
  let (a,b,c,d) = abcd in
  is_a_wf a /\ is_b_wf b /\ is_c_wf c /\ is_d_wf d

predicate is__tuple5_wf
  (is_a_wf : 'a -> bool)
  (is_b_wf : 'b -> bool)
  (is_c_wf : 'c -> bool)
  (is_d_wf : 'd -> bool)
  (is_e_wf : 'e -> bool)
  (abcde : ('a, 'b, 'c, 'd, 'e)) =
  let (a,b,c,d,e) = abcde in
  is_a_wf a /\ is_b_wf b /\ is_c_wf c /\ is_d_wf d /\ is_e_wf e

predicate is__tuple9_wf
  (is_a_wf : 'a -> bool)
  (is_b_wf : 'b -> bool)
  (is_c_wf : 'c -> bool)
  (is_d_wf : 'd -> bool)
  (is_e_wf : 'e -> bool)
  (is_f_wf : 'f -> bool)
  (is_g_wf : 'g -> bool)
  (is_h_wf : 'h -> bool)
  (is_i_wf : 'i -> bool)
  (abcdefghi : ('a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i)) =
  let (a,b,c,d,e,f,g,h,i) = abcdefghi in
  is_a_wf a /\ is_b_wf b /\ is_c_wf c /\ is_d_wf d /\ is_e_wf e /\
  is_f_wf f /\ is_g_wf g /\ is_h_wf h /\ is_i_wf i

predicate is_list_wf (_ : 'a -> bool) (_ : list 'a) = true

predicate is_unit_wf (_ : unit) = true

predicate is_bool_wf (_ : bool) = true

predicate is_map_wf (_ : 'a -> bool) (_ : 'b -> bool) (_ : map 'a 'b) = true

predicate is_option_wf (is_a_wf : 'a -> bool) (o : option 'a) =
  match o with
  | None -> true
  | Some a -> is_a_wf a
  end

predicate is_int_wf (_ : int) = true

type nat = int

predicate is_nat_wf (x : nat) = x >= 0

type mutez = int

predicate is_mutez_wf (x : mutez) = x >= 0

type bytes = string

predicate is_bytes_wf (_ : bytes) = true

type big_map 'a 'b = map 'a 'b

predicate is_big_map_wf (_ : 'a -> bool) (_ : 'b -> bool) (_ : big_map 'a 'b) = true

type address = int

predicate is_address_wf (_ : address) = true

type key_hash = int

predicate is_key_hash_wf (_ : address) = true

type timestamp = int

predicate is_timestamp_wf (_ : address) = true

type or 'a 'b = Left 'a | Right 'b

predicate is_or_wf (is_a_wf : 'a -> bool) (is_b_wf : 'b -> bool) (ab : or 'a 'b) =
  match ab with
  | Left a -> is_a_wf a
  | Right b -> is_b_wf b
  end

type lambda 'a 'b = 'a -> 'b

predicate is_lambda_wf (_ : 'a -> bool) (_ : 'b -> bool) (_ : lambda 'a 'b) = true
