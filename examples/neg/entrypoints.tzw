scope Preambles
  use export int.Int
  use export int.Abs
  use export int.EuclideanDivision
  use export list.List
  use export option.Option
  use export map.Map
  use export map.Const

  exception Insufficient_mutez
  exception Terminate

  type nat = int

  type mutez = int

  type address = int

  type key_hash = int

  type timestamp = int

  type contract 'a = int

  type or 'a 'b = Left 'a | Right 'b

  type step = (address, address, address, mutez, nat)

  function mk_step (source : address) (sender : address) (self : address) (amount : mutez) (level : nat) : step =
    (source, sender, self, amount, level)

  function source (st : step) : address =
    match st with x, _, _, _ ,_ -> x end

  function sender (st : step) : address =
    match st with _, x, _, _ ,_ -> x end

  function self (st : step) : address =
    match st with _, _, x, _ ,_ -> x end

  function amount (st : step) : mutez =
    match st with _, _, _, x ,_ -> x end

  function level (st : step) : nat =
    match st with _, _, _, _, x -> x end

  predicate st_wf (st : step) =
    st.amount >= 0

end

scope Unknown

  predicate pre (c : ctx) =
    c.bob_storage = Alice.addr

  predicate post (c : ctx) (c' : ctx) =
    c'.bob_storage = Alice.addr /\
    c'.bob_balance = c.bob_balance

  scope Entrypoint

  predicate default unit

  end

end


scope Alice

  type storage = address

  predicate pre (c : ctx) = inv_pre c

  predicate post (_st : step) (_gp : gparam) (c : ctx) (c' : ctx) = inv_post c c'

  let upper_ops = 1

  scope Spec

  predicate default (_st : step) (_p : unit) (s : storage) (ops : list operation) (_s' : storage) =
    (* This transaction seems to call only Carol, but in fact, it may call Bob because the call signature only consists of the entrypoint's name and parameter type. 
    As a result, this example should be unverified since Bob accept a call from Alice as specified in the invariant pre-condition. *)
    (ops = Cons (Xfer (Gp'Carol'default ()) 1 s) Nil)

  end

end

scope Bob

  type storage = address

  predicate pre (c : ctx) = inv_pre c

  predicate post (_st : step) (_gp : gparam) (c : ctx) (c' : ctx) = inv_post c c'

  let upper_ops = 0

  scope Spec

  predicate default (st : step) (_p : unit) (s : storage) (ops : list operation) (_s' : storage) =
    (st.sender = s) /\
    ops = Nil

  end

end

scope Carol

  type storage = address

  predicate pre (c : ctx) = inv_pre c

  predicate post (_st : step) (_gp : gparam) (c : ctx) (c' : ctx) = inv_post c c'

  let upper_ops = 0

  scope Spec

  predicate default (st : step) (_p : unit) (s : storage) (ops : list operation) (_s' : storage) =
    (st.sender = s) /\
    ops = Nil

  end

end
