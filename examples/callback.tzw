scope Postambles

  predicate addr_inv (c : ctx) =
    c.caller_storage.Caller.callee_addr = Callee.addr

  predicate cnt_resp_inv (c : ctx) =
    c.caller_storage.Caller.counter + 123 = c.caller_storage.Caller.response

  predicate ctx_inv (c : ctx) =
    addr_inv c /\ cnt_resp_inv c

  predicate post_caller_inv (st : step) (gp : gparam) (c : ctx) (c' : ctx) =
    addr_inv c' /\
    match gp, st.entrypoint with
    | ICon.Gp (param : nat), ICon.Contract.Callback ->
        st.sender = Callee.addr /\
        c'.caller_storage.Caller.counter = c.caller_storage.Caller.counter /\
        c'.caller_storage.Caller.response = param
    | ICon.Gp (_param : nat), ICon.Contract.Update ->
        cnt_resp_inv c'
    | _ -> true
    end

  predicate pre_callee_inv (st : step) (_gp : gparam) (c : ctx) =
    addr_inv c /\
    (st.sender <> Caller.addr -> cnt_resp_inv c)

  predicate post_callee_inv (st : step) (gp : gparam) (c : ctx) (c' : ctx) =
    addr_inv c' /\
    match gp, st.entrypoint with
    | ICon.Gp (param : nat), ICon.Contract.Oracle ->
        if st.sender = Caller.addr then
          c'.caller_storage.Caller.response = param + 123 /\
          c'.caller_storage.Caller.counter = c.caller_storage.Caller.counter
        else
          cnt_resp_inv c'
    | _ -> true
    end

end


scope Unknown

  predicate pre (c : ctx) = ctx_inv c

  predicate post (_c : ctx) (c' : ctx) = ctx_inv c'

  scope Entrypoint

    predicate default unit

  end

end

scope Caller

  type storage [@gen_wf] = {
    callee_addr: address;
    counter: nat;
    response: nat;
  }

  let upper_ops = 1

  predicate pre (_st : step) (_gp : gparam) (c : ctx) = addr_inv c

  predicate post (st : step) (gp : gparam) (c : ctx) (c' : ctx) = post_caller_inv st gp c c'

  scope Spec

    predicate update (_st : step) (p : nat) (s : storage) (ops : list operation) (s' : storage) =
      s' = { s with counter = p } /\
      ops = Cons (Xfer (ICon.Gp (p : nat)) 0 (ICon.Contract.oracle s.callee_addr)) Nil

    predicate callback (st : step) (p : nat) (s : storage) (ops : list operation) (s' : storage) =
      st.sender = s.callee_addr /\
      s' = { s with response = p } /\
      ops = Nil

  end

end

scope Callee

  type storage [@gen_wf] = unit

  let upper_ops = 1

  predicate pre (st : step) (gp : gparam) (c : ctx) = pre_callee_inv st gp c

  predicate post (st : step) (gp : gparam) (c : ctx) (c' : ctx) = post_callee_inv st gp c c'

  scope Spec

    predicate oracle (st : step) (p : nat) (s : storage) (ops : list operation) (s' : storage) =
      s' = s /\
      ops = Cons (Xfer (ICon.Gp (p + 123 : nat)) 0 (ICon.Contract.callback st.sender)) Nil

  end

end
