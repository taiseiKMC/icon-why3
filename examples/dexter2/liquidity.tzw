scope Preambles
  use export int.Int
  use export int.Abs
  use export int.EuclideanDivision
  use export list.List
  use export option.Option
  use export map.Map
  use export map.Const

  exception Insufficient_mutez
  exception Terminate

  type nat = int

  type mutez = int

  type address = int

  type key_hash = int

  type timestamp = int

  type contract 'a = int

  type or 'a 'b = Left 'a | Right 'b

  type step = (address, address, address, mutez, nat)

  function mk_step (source : address) (sender : address) (self : address) (amount : mutez) (level : nat) : step =
    (source, sender, self, amount, level)

  function source (st : step) : address =
    match st with x, _, _, _ ,_ -> x end

  function sender (st : step) : address =
    match st with _, x, _, _ ,_ -> x end

  function self (st : step) : address =
    match st with _, _, x, _ ,_ -> x end

  function amount (st : step) : mutez =
    match st with _, _, _, x ,_ -> x end

  function level (st : step) : nat =
    match st with _, _, _, _, x -> x end

  predicate st_wf (st : step) =
    st.amount >= 0

  function sum_of : map address (option nat) -> nat

  axiom SumE : sum_of (const None) = 0

  axiom SumI : forall m k v.
    let old_value = match m[k] with Some n -> n | None -> 0 end in
    sum_of m[k <- Some v] = sum_of m + v - old_value

  axiom SumI' : forall m k.
    let old_value = match m[k] with Some n -> n | None -> 0 end in
    sum_of m[k <- None] =  sum_of m - old_value

  axiom SumN : forall m k. match m[k] with Some n -> sum_of m >= n | None -> True end

  function null_addr : address

end

scope Postambles

  axiom distinct_address1: null_addr <> Cpmm.addr
  axiom distinct_address2: Cpmm.addr <> Lqt.addr
  axiom distinct_address3: Lqt.addr <> null_addr

  predicate pre_inv (c : ctx) =
    c.lqt_storage.Lqt.admin = Cpmm.addr /\
    c.lqt_storage.Lqt.total_supply = (sum_of c.lqt_storage.Lqt.tokens)

  predicate post_inv (c : ctx) (c' : ctx) =
    c'.lqt_storage.Lqt.admin = Cpmm.addr /\
    c'.lqt_storage.Lqt.total_supply = (sum_of c'.lqt_storage.Lqt.tokens) /\
    (c.cpmm_storage.Cpmm.lqt_address <> null_addr ->
     c'.cpmm_storage.Cpmm.lqt_address = c.cpmm_storage.Cpmm.lqt_address) /\
    (c'.cpmm_storage.Cpmm.lqt_address = null_addr \/
      c'.cpmm_storage.Cpmm.lqt_address = Lqt.addr ->
     c'.cpmm_storage.Cpmm.lqt_total - c'.lqt_storage.Lqt.total_supply =
           c.cpmm_storage.Cpmm.lqt_total - c.lqt_storage.Lqt.total_supply)

  predicate post_inv2 (st : step) (gp : gparam) (c : ctx) (c' : ctx) =
    c'.lqt_storage.Lqt.admin = Cpmm.addr /\
    c'.lqt_storage.Lqt.total_supply = (sum_of c'.lqt_storage.Lqt.tokens) /\
    (c.cpmm_storage.Cpmm.lqt_address <> null_addr ->
     c'.cpmm_storage.Cpmm.lqt_address = c.cpmm_storage.Cpmm.lqt_address) /\
    (c'.cpmm_storage.Cpmm.lqt_address = null_addr \/
      c'.cpmm_storage.Cpmm.lqt_address = Lqt.addr ->
    let total_record = c.cpmm_storage.Cpmm.lqt_total in
    let total_supply = c.lqt_storage.Lqt.total_supply in
    let total_record' = c'.cpmm_storage.Cpmm.lqt_total in
    let total_supply' = c'.lqt_storage.Lqt.total_supply in
    if st.sender = c.lqt_storage.Lqt.admin (* Cpmm.addr *) then
      match gp with
      | Gp'0mintOrBurn'0int4address quantity _ ->
          total_record' - total_supply' + quantity = total_record - total_supply
      | _ -> total_record' - total_supply' = total_record - total_supply
      end
    else total_record' - total_supply' = total_record - total_supply)

end

scope Unknown

  predicate pre (c : ctx) = pre_inv c

  predicate post (c : ctx) (c' : ctx) = post_inv c c'

  scope Entrypoint

  predicate default unit

  predicate transfer (list (address, list (address, (nat, nat))))

  predicate balance_of (list (address, nat), contract (list ((address, nat), nat)))

  end

end

scope Cpmm

  type storage = {
    token_pool : nat;
    xtz_pool : mutez;
    lqt_total : nat;
    self_is_updating_token_pool : bool;
    freeze_baker : bool;
    manager : address;
    token_address : address;
    token_id : nat;
    lqt_address : address;
    }

  predicate pre (c : ctx) = pre_inv c

  predicate post (_st : step) (_gp : gparam) (c : ctx) (c' : ctx) = post_inv c c'

  let upper_ops = 3

  scope Spec

  predicate add_liquidity (_st : step) (_p1 : address) (_p2 : nat) (_p3 : nat) (_p4 : timestamp) (s : storage) (op : list operation) (s' : storage) =
    s.lqt_address <> null_addr /\
    s'.lqt_address = s.lqt_address /\
    let lqt_minted = s'.lqt_total - s.lqt_total in
    match op with
    | Cons (Xfer (Gp'Unknown'transfer _) _ _)
      (Cons (Xfer (Gp'Lqt'mintOrBurn q _) _ lqc) Nil) ->
      q = lqt_minted /\
      lqc = s.lqt_address
    | _ -> False
    end

  predicate remove_liquidity (_st : step) (_p1 : address) (p2 : nat) (_p3 : mutez) (_p4 : nat) (_p5 : timestamp) (s : storage) (op : list operation) (s' : storage) =
    let lqt_burned = p2 in
    s.lqt_address <> null_addr /\
    s'.lqt_address = s.lqt_address /\
    s'.lqt_total = s.lqt_total - lqt_burned /\
    match op with
    | Cons (Xfer (Gp'Lqt'mintOrBurn q _) _ lqc)
      (Cons (Xfer (Gp'Unknown'transfer _) _ _)
       (Cons (Xfer (Gp'Unknown'default _) _ _) Nil)) ->
      q = 0 - lqt_burned /\
      lqc = s.lqt_address
    | _ -> False
    end

  predicate xtz_to_token (_st : step) (_p1 : address) (_p2 : nat) (_p3 : timestamp) (s : storage) (op : list operation) (s' : storage) =
    s'.lqt_address = s.lqt_address /\
    s'.lqt_total = s.lqt_total /\
    match op with
    | Cons (Xfer (Gp'Unknown'transfer _) _ _) Nil ->
      True
    | _ -> False
    end

  predicate token_to_xtz (_st : step) (_p1 : address) (_p2 : nat) (_p3 : mutez) (_p4 : timestamp) (s : storage) (op : list operation) (s' : storage) =
    s'.lqt_address = s.lqt_address /\
    s'.lqt_total = s.lqt_total /\
    match op with
    | Cons (Xfer (Gp'Unknown'transfer _) _ _)
      (Cons (Xfer (Gp'Unknown'default _) _ _) Nil) ->
      True
    | _ -> False
    end

  predicate token_to_token (_st : step) (_p1 : address) (_p2 : nat) (_p3 : address) (_p4 : nat) (_p5 : timestamp) (s : storage) (op : list operation) (s' : storage) =
    s'.lqt_address = s.lqt_address /\
    s'.lqt_total = s.lqt_total /\
    match op with
    | Cons (Xfer (Gp'Unknown'transfer _) _ _)
      (Cons (Xfer (Gp'Cpmm'xtz_to_token _ _ _) _ _) Nil) ->
      True
    | _ -> False
    end

  predicate set_baker (_st : step) (_p1 : option key_hash) (_p2 : bool) (s : storage) (op : list operation) (s' : storage) =
    s'.lqt_address = s.lqt_address /\
    s'.lqt_total = s.lqt_total /\
    match op with
    | Cons (Sdel _) Nil ->
      True
    | _ -> False
    end

  predicate set_manager (_st : step) (_p : address) (s : storage) (op : list operation) (s' : storage) =
    s'.lqt_address = s.lqt_address /\
    s'.lqt_total = s.lqt_total /\
    op = Nil

  predicate set_lqt_address (_st : step) (p : address) (s : storage) (op : list operation) (s' : storage) =
    s.lqt_address = null_addr /\
    s'.lqt_address = p /\
    s'.lqt_total = s.lqt_total /\
    op = Nil

  predicate update_token_pool (_st : step) (_p : unit) (s : storage) (op : list operation) (s' : storage) =
    s'.lqt_address = s.lqt_address /\
    s'.lqt_total = s.lqt_total /\
    match op with
    | Cons (Xfer (Gp'Unknown'balance_of _) _ _) Nil ->
      True
    | _ -> False
    end

  predicate update_token_pool_internal (_st : step) (_p : list ((address, nat), nat)) (s : storage) (op : list operation) (s' : storage) =
    s'.lqt_address = s.lqt_address /\
    s'.lqt_total = s.lqt_total /\
    op = Nil

  predicate default (_st : step) (_p : unit) (s : storage) (op : list operation) (s' : storage) =
    s'.lqt_address = s.lqt_address /\
    s'.lqt_total = s.lqt_total /\
    op = Nil

  end

end

scope Lqt

  type storage = {
    tokens : map address (option nat);
    allowances : map (address, address) (option nat);
    admin : address;
    total_supply : nat;
  }

  predicate pre (c : ctx) = pre_inv c

  predicate post (st : step) (gp : gparam) (c : ctx) (c' : ctx) =
    post_inv2 st gp c c'

  let upper_ops = 1

  scope Spec

  predicate transfer (_st : step) (p1 : address) (p2 : address) (p3 : nat) (s : storage) (op : list operation) (s' : storage) =
    let address_from = p1 in
    let address_to = p2 in
    let value = p3 in
    s'.total_supply = s.total_supply /\
    s'.admin = s.admin /\
    let from_balance = match s.tokens[address_from] with Some n -> n | None -> 0 end in
    let from_balance = from_balance - value in
    from_balance >= 0 /\
    let from_balance = abs from_balance in
    let maybe_from_balance = if from_balance = 0 then None else Some from_balance in
    let tokens = s.tokens[address_from <- maybe_from_balance] in
    let to_balance = match tokens[address_to] with Some n -> n | None -> 0 end in
    let to_balance = to_balance + value in
    let maybe_to_balance = if to_balance = 0 then None else Some to_balance in
    s'.tokens = tokens[address_to <- maybe_to_balance] /\
    op = Nil

  predicate approve (_st : step) (_p1 : address) (_p2 : nat) (s : storage) (op : list operation) (s' : storage) =
    s'.total_supply = s.total_supply /\
    s'.admin = s.admin /\
    s'.tokens = s.tokens /\
    op = Nil

  predicate mintOrBurn (st : step) (quantity : int) (target : address) (s : storage) (op : list operation) (s' : storage) =
    st.sender = s.admin /\
    s'.total_supply = abs (s.total_supply + quantity) /\
    s'.admin = s.admin /\
    op = Nil /\
    let old_balance = match s.tokens[target] with Some n -> n | None -> 0 end in
    old_balance + quantity >= 0 /\
    let new_balance = old_balance + quantity in
    let maybe_new_balance = if new_balance = 0 then None else Some new_balance in
    s'.tokens = s.tokens[target <- maybe_new_balance]

  predicate getAllowance (_st : step) (_p1 : (address, address)) (p2 : contract nat) (s : storage) (op : list operation) (s' : storage) =
    let callback = p2 in
    s'.total_supply = s.total_supply /\
    s'.admin = s.admin /\
    s'.tokens = s.tokens /\
    match op with
    | Cons (Xfer _ _ c) Nil ->
      c = callback
    | _ -> False
    end

  predicate getBalance (_st : step) (_p1 : address) (p2 : contract nat) (s : storage) (op : list operation) (s' : storage) =
    let callback = p2 in
    s'.total_supply = s.total_supply /\
    s'.admin = s.admin /\
    s'.tokens = s.tokens /\
    match op with
    | Cons (Xfer _ _ c) Nil ->
      c = callback
    | _ -> False
    end

  predicate getTotalSupply (_st : step) (_p1 : unit) (p2 : contract nat) (s : storage) (op : list operation) (s' : storage) =
    let callback = p2 in
    s'.total_supply = s.total_supply /\
    s'.admin = s.admin /\
    s'.tokens = s.tokens /\
    match op with
    | Cons (Xfer _ _ c) Nil ->
      c = callback
    | _ -> False
    end

  (* predicate default (st : step) (p : unit) (s : storage) (op : list operation) (s' : storage) = *)
  (*   False *)

  end

end
